'use strict';
// Depending on the URL argument, render as LTR or RTL.
var rtl = (document.location.search == '?rtl');
var block = null;

function startCodeEditor(toolbox, editor) {
  var toolbox = document.getElementById('toolbox');
  Blockly.inject(document.getElementById('blocklyEditor'),
          {rtl: rtl,
           path: '../',
           toolbox: toolbox,
           comments: true,
           disable: true,
           collapse: true,
           realtime: false,
           realtimeOptions:
             {clientId: 'YOUR CLIENT ID GOES HERE',
              chatbox: {elementId: 'chatbox'},
              collabElementId: 'collaborators'}});
  if (Blockly.Realtime.isEnabled()) {
    enableRealtimeSpecificUi();
  }
}

// Turn the code generated by Blockly into JS scripts for the execution engine
// Each "event" block starts a separate script
function getScripts(code) {
    var EVENT_STR = '"event":';
    var CODE_STR  = '"code":';
    function codeToJSON(code) {
        var script = code.replace(/\n/g, '').split(EVENT_STR);
        for(var i = 0; i < script.length; i++) {
            var hasCode = script[i].indexOf(CODE_STR);
            if( hasCode > -1) {
                var startCode = hasCode + CODE_STR.length;
                var eventHeader = script[i].substring(0, startCode);
                var codeSnippet = script[i].substring(startCode, script[i].length);
                script[i] = '{' + EVENT_STR + eventHeader + JSON.stringify(codeSnippet) + '},';
            }
            else
                script[i] = '';
        }
        var codeObj = script.join('');
        codeObj = '[' +codeObj.substring(0, codeObj.length-1) + ']'; // remove the last ','
        return codeObj;
    }
    var scripts = codeToJSON(code);
    return JSON.parse(scripts);
}

function play() {
  var testcode = "\
'event': 'onstart', 'code':\
var sprite1 = stage.createOrGetSprite('sprite1');\
sprite1.setText('Hello');\
sprite1.wait(500);\
sprite1.setFontSize('100px');\
sprite1.setTextEffect('fire');\
sprite1.wait(20000);\
sprite1.setTextEffect(null);\
sprite1.moveTo(50,100,0, 1000);\
sprite1.moveTo(00,100,0, 1000);\
sprite1.wait(1000);\
sprite1.setFontSize('150px');\
sprite1.setTextEffect('pinkNeon');"
  var code = Blockly['JavaScript'].workspaceToCode();
  //var code = testcode;
  window.printCode(code);
  window.runCode(code);
}

function printCode(code) {
  var output = document.getElementById('sourceCode');
  output.innerHTML = code.replace(/;/g, ';\n');
}

/*
require(['wecodeRuntime', 'executionEngine'], function(wecodeRuntime, executionEngine) {
    var stageElement = document.getElementById('playGroundDiv');
    var stage = wecodeRuntime.createStage(stageElement);
    var executionEnvironment = new executionEngine.ExecutionEnvironment(stage);

    window.runCode = function(code) {
      var scripts = window.getScripts(code);
      //var scripts = testcode;
      executionEnvironment.setScripts(scripts);
      stage.eventOutput.emit("onstart");
    };
    
});
*/
/* Older version - working

require(['wecodeRuntime', 'executionEngine'], function(wecodeRuntime, executionEngine) {
    var stageElement = document.getElementById('playGroundDiv');
    var stage = wecodeRuntime.createStage(stageElement);
    var executionEnvironment = new executionEngine.ExecutionEnvironment(stage);

    
    // var sprite1 = stage.createOrGetSprite('sprite1');
    // sprite1.setText('Hello');


    // sprite1.wait(500);
    // sprite1.setFontSize('100px');
    // sprite1.setTextEffect('fire');
    // sprite1.wait(20000);
    // sprite1.setTextEffect(null);
    //sprite1.moveTo(50,100,0, 1000)
    //sprite1.moveTo(00,100,0, 1000)
    // sprite1.wait(1000);
    // sprite1.setFontSize('150px');
    // sprite1.setTextEffect('pinkNeon');

    // window.run = function(code) {
    //     var executor = new executionEngine.Executor(code, stage);
    //     executor.run();
    // };

    // window.runCodeOld = function() {
    //     var sprite1 = stage.createOrGetSprite('sprite1');
    //     var codeText = document.getElementById('code').value;
    //     var codes = codeText.split('\n===\n');
    //     codes.forEach(function(code) {
    //         var executor = new executionEngine.Executor(code, stage);
    //         executor.run();
    //     });
    // }

    

    window.runCode = function() {
        // Just the parsing of the textarea value
        // var codeText = document.getElementById('code').value;
        // var codes = codeText.split('\n===\n');
        // var scripts = codes.map(function(code) {
        //     var scriptData = code.split(':::\n');
        //     return {
        //         event: scriptData[0],
        //         code: scriptData[1]
        //     };
        // });

        // var scripts = [
        //   {event:'onstart',
        //   code: 'var sprite4 = stage.createOrGetSprite("sprite4");sprite4.setText("hello world");'},
        //   {event:'onstart',
        //   code: 'console.log(456)'}
        // ];

        var scripts = window.getScripts();

        // execute the scripts
        executionEnvironment.setScripts(scripts);
        stage.eventOutput.emit("onstart");
    };
    
});
*/
/*
function enableRealtimeSpecificUi() {
  var realtimeDiv = document.getElementById('realtime');
  realtimeDiv.display = 'block';
}

function toXml() {
  var output = document.getElementById('importExport');
  var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
  output.value = Blockly.Xml.domToPrettyText(xml);
  output.focus();
  output.select();
}

function fromXml() {
  var input = document.getElementById('importExport');
  var xml = Blockly.Xml.textToDom(input.value);
  Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xml);
}

*/